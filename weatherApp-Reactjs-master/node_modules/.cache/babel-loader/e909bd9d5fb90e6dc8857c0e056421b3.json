{"ast":null,"code":"import _regeneratorRuntime from\"F:\\\\IT\\\\weather_application\\\\weatherApp\\\\weatherApp-Reactjs-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"F:\\\\IT\\\\weather_application\\\\weatherApp\\\\weatherApp-Reactjs-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"F:\\\\IT\\\\weather_application\\\\weatherApp\\\\weatherApp-Reactjs-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"F:\\\\IT\\\\weather_application\\\\weatherApp\\\\weatherApp-Reactjs-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"F:\\\\IT\\\\weather_application\\\\weatherApp\\\\weatherApp-Reactjs-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"F:\\\\IT\\\\weather_application\\\\weatherApp\\\\weatherApp-Reactjs-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from\"react\";import apiKeys from\"./apiKeys\";import Clock from\"react-live-clock\";import Forcast from\"./forcast\";import loader from\"./images/WeatherIcons.gif\";import ReactAnimatedWeather from\"react-animated-weather\";var dateBuilder=function dateBuilder(d){var months=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];var days=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];var day=days[d.getDay()];var date=d.getDate();var month=months[d.getMonth()];var year=d.getFullYear();return\"\".concat(day,\", \").concat(date,\" \").concat(month,\" \").concat(year);};var defaults={color:\"white\",size:112,animate:true};var Weather=/*#__PURE__*/function(_React$Component){_inherits(Weather,_React$Component);var _super=_createSuper(Weather);function Weather(){var _this;_classCallCheck(this,Weather);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={lat:undefined,lon:undefined,errorMessage:undefined,temperatureC:undefined,temperatureF:undefined,city:undefined,country:undefined,humidity:undefined,description:undefined,icon:\"CLEAR_DAY\",sunrise:undefined,sunset:undefined,errorMsg:undefined};_this.getPosition=function(options){return new Promise(function(resolve,reject){navigator.geolocation.getCurrentPosition(resolve,reject,options);});};_this.getWeather=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(lat,lon){var api_call,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"\".concat(apiKeys.base,\"weather?lat=\").concat(lat,\"&lon=\").concat(lon,\"&units=metric&APPID=\").concat(apiKeys.key));case 2:api_call=_context.sent;_context.next=5;return api_call.json();case 5:data=_context.sent;_this.setState({lat:lat,lon:lon,city:data.name,temperatureC:Math.round(data.main.temp),temperatureF:Math.round(data.main.temp*1.8+32),humidity:data.main.humidity,main:data.weather[0].main,country:data.sys.country// sunrise: this.getTimeFromUnixTimeStamp(data.sys.sunrise),\n// sunset: this.getTimeFromUnixTimeStamp(data.sys.sunset),\n});_context.t0=_this.state.main;_context.next=_context.t0===\"Haze\"?10:_context.t0===\"Clouds\"?12:_context.t0===\"Rain\"?14:_context.t0===\"Snow\"?16:_context.t0===\"Dust\"?18:_context.t0===\"Drizzle\"?20:_context.t0===\"Fog\"?22:_context.t0===\"Smoke\"?24:_context.t0===\"Tornado\"?26:28;break;case 10:_this.setState({icon:\"CLEAR_DAY\"});return _context.abrupt(\"break\",29);case 12:_this.setState({icon:\"CLOUDY\"});return _context.abrupt(\"break\",29);case 14:_this.setState({icon:\"RAIN\"});return _context.abrupt(\"break\",29);case 16:_this.setState({icon:\"SNOW\"});return _context.abrupt(\"break\",29);case 18:_this.setState({icon:\"WIND\"});return _context.abrupt(\"break\",29);case 20:_this.setState({icon:\"SLEET\"});return _context.abrupt(\"break\",29);case 22:_this.setState({icon:\"FOG\"});return _context.abrupt(\"break\",29);case 24:_this.setState({icon:\"FOG\"});return _context.abrupt(\"break\",29);case 26:_this.setState({icon:\"WIND\"});return _context.abrupt(\"break\",29);case 28:_this.setState({icon:\"CLEAR_DAY\"});case 29:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}();return _this;}_createClass(Weather,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;if(navigator.geolocation){this.getPosition()//If user allow location service then will fetch data & send it to get-weather function.\n.then(function(position){_this2.getWeather(position.coords.latitude,position.coords.longitude);}).catch(function(err){//If user denied location service then standard location weather will le shown on basis of latitude & latitude.\n_this2.getWeather(28.67,77.22);alert(\"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\");});}else{alert(\"Geolocation not available\");}this.timerID=setInterval(function(){return _this2.getWeather(_this2.state.lat,_this2.state.lon);},600000);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){clearInterval(this.timerID);}},{key:\"render\",value:function render(){if(this.state.temperatureC){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"city\"},/*#__PURE__*/React.createElement(\"div\",{className:\"title\"},/*#__PURE__*/React.createElement(\"h2\",null,this.state.city),/*#__PURE__*/React.createElement(\"h3\",null,this.state.country)),/*#__PURE__*/React.createElement(\"div\",{className:\"mb-icon\"},\" \",/*#__PURE__*/React.createElement(ReactAnimatedWeather,{icon:this.state.icon,color:defaults.color,size:defaults.size,animate:defaults.animate}),/*#__PURE__*/React.createElement(\"p\",{style:{color:'white',fontSize:'larger'}},this.state.main)),/*#__PURE__*/React.createElement(\"div\",{className:\"date-time\"},/*#__PURE__*/React.createElement(\"div\",{className:\"dmy\"},/*#__PURE__*/React.createElement(\"div\",{id:\"txt\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"current-time\"},/*#__PURE__*/React.createElement(Clock,{format:\"HH:mm:ss\",interval:1000,ticking:true})),/*#__PURE__*/React.createElement(\"div\",{className:\"current-date\"},dateBuilder(new Date()))),/*#__PURE__*/React.createElement(\"div\",{className:\"temperature\"},/*#__PURE__*/React.createElement(\"p\",null,this.state.temperatureC,\"\\xB0\",/*#__PURE__*/React.createElement(\"span\",null,\"C\"))))),/*#__PURE__*/React.createElement(Forcast,{icon:this.state.icon,weather:this.state.main}));}else{return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"img\",{src:loader,style:{width:\"50%\",WebkitUserDrag:\"none\"}}),/*#__PURE__*/React.createElement(\"h3\",{style:{color:\"white\",fontSize:\"22px\",fontWeight:\"600\"}},\"Detecting your location\"),/*#__PURE__*/React.createElement(\"h3\",{style:{color:\"white\",marginTop:\"10px\"}},\"Your current location wil be displayed on the App \",/*#__PURE__*/React.createElement(\"br\",null),\" & used for calculating Real time weather.\"));}}}]);return Weather;}(React.Component);export default Weather;","map":{"version":3,"sources":["F:/IT/weather_application/weatherApp/weatherApp-Reactjs-master/src/Components/currentLocation.js"],"names":["React","apiKeys","Clock","Forcast","loader","ReactAnimatedWeather","dateBuilder","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","defaults","color","size","animate","Weather","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","city","country","humidity","description","icon","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","fetch","base","key","api_call","json","data","setState","name","Math","round","main","temp","weather","sys","then","position","coords","latitude","longitude","catch","err","alert","timerID","setInterval","clearInterval","fontSize","Date","width","WebkitUserDrag","fontWeight","marginTop","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\nconst dateBuilder = (d) => {\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\nclass Weather extends React.Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        //If user allow location service then will fetch data & send it to get-weather function.\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\n          this.getWeather(28.67, 77.22);\n          alert(\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\n          );\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n  getWeather = async (lat, lon) => {\n    const api_call = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n    );\n    const data = await api_call.json();\n    this.setState({\n      lat: lat,\n      lon: lon,\n      city: data.name,\n      temperatureC: Math.round(data.main.temp),\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\n      humidity: data.main.humidity,\n      main: data.weather[0].main,\n      country: data.sys.country,\n      // sunrise: this.getTimeFromUnixTimeStamp(data.sys.sunrise),\n\n      // sunset: this.getTimeFromUnixTimeStamp(data.sys.sunset),\n    });\n    switch (this.state.main) {\n      case \"Haze\":\n        this.setState({ icon: \"CLEAR_DAY\" });\n        break;\n      case \"Clouds\":\n        this.setState({ icon: \"CLOUDY\" });\n        break;\n      case \"Rain\":\n        this.setState({ icon: \"RAIN\" });\n        break;\n      case \"Snow\":\n        this.setState({ icon: \"SNOW\" });\n        break;\n      case \"Dust\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      case \"Drizzle\":\n        this.setState({ icon: \"SLEET\" });\n        break;\n      case \"Fog\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Smoke\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Tornado\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      default:\n        this.setState({ icon: \"CLEAR_DAY\" });\n    }\n  };\n\n  render() {\n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div className=\"city\">\n            <div className=\"title\">\n              <h2>{this.state.city}</h2>\n              <h3>{this.state.country}</h3>\n            </div>\n            <div className=\"mb-icon\">\n              {\" \"}\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p style={{color:'white', fontSize:'larger'}}>{this.state.main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                  {this.state.temperatureC}°<span>C</span>\n                </p>\n                {/* <span className=\"slash\">/</span>\n                {this.state.temperatureF} &deg;F */}\n              </div>\n            </div>\n            </div>\n\n          <Forcast icon={this.state.icon} weather={this.state.main} />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location wil be displayed on the App <br></br> & used\n            for calculating Real time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}